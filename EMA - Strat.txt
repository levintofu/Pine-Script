//@version=4
strategy("My Strategy", overlay=true)

// Input parameters
tf_input = input(title="Timeframe", type=input.resolution, defval="60")
ma_length = input(title="MA Length", type=input.integer, defval=20)
ema_length = input(title="EMA Length", type=input.integer, defval=50)
rsi_length = input(title="RSI Length", type=input.integer, defval=14)
rsi_oversold = input(title="RSI Oversold", type=input.integer, defval=30)
rsi_overbought = input(title="RSI Overbought", type=input.integer, defval=70)
longs = input(title="Enable Longs", type=input.bool, defval=true)
shorts = input(title="Enable Shorts", type=input.bool, defval=true)
position_size = input(title="Position Size (%)", type=input.float, minval=0, step=0.1, defval=2.0)

// Calculate indicators
ma = sma(close, ma_length)
ema = ema(close, ema_length)
rsi = rsi(close, rsi_length)

// Calculate signals
long_condition = longs and crossover(ma, ema) and rsi < rsi_oversold
short_condition = shorts and crossunder(ma, ema) and rsi > rsi_overbought

// Set position size
position_size_percent = position_size / 100
position_size_value = strategy.equity * position_size_percent
position_size_qty = position_size_value / close

// Enter positions
if long_condition
    strategy.entry("Long", strategy.long, qty=position_size_qty)
if short_condition
    strategy.entry("Short", strategy.short, qty=position_size_qty)

// Exit positions
if strategy.position_size > 0 and crossunder(ma, ema)
    strategy.close("Long")
if strategy.position_size < 0 and crossover(ma, ema)
    strategy.close("Short")

// Plot indicators
plot(ma, color=color.orange, title="MA")
plot(ema, color=color.purple, title="EMA")
plot(rsi, color=color.blue, title="RSI")
hline(rsi_oversold, color=color.green, linestyle=hline.style_dotted, title="Oversold")
hline(rsi_overbought, color=color.red, linestyle=hline.style_dotted, title="Overbought")

// Plot signals
plotshape(long_condition, style=shape.triangleup, location=location.belowbar, color=color.green, title="Long")
plotshape(short_condition, style=shape.triangledown, location=location.abovebar, color=color.red, title="Short")
//@version=5
strategy("BTC L/S Ratio and Flag Trading Strategy", overlay=true)

// Long/Short Ratio
long_short_ratio = input.float(title="Long/Short Ratio", defval=3)

// Bull/Bear Flag Pattern
flag_period = input.int(title="Flag Period", defval=10)
flag_height = input.float(title="Flag Height", defval=0.05)

bull_flag = close > ta.highest(high, flag_period) - flag_height * (ta.highest(high, flag_period) - ta.lowest(low, flag_period)) and close > ta.highest(close, flag_period - 1)
bear_flag = close < ta.lowest(low, flag_period) + flag_height * (ta.highest(high, flag_period) - ta.lowest(low, flag_period)) and close < ta.lowest(close, flag_period - 1)

// Determine overall sentiment based on long/short ratio
overall_sentiment = long_short_ratio > 1 ? "Bullish" : "Bearish"

// Buy when there's a bull flag and long/short ratio is bullish
longCondition = bull_flag and long_short_ratio > 1
if (longCondition)
    strategy.entry("Long", strategy.long)

// Sell when there's a bear flag and long/short ratio is bearish
shortCondition = bear_flag and long_short_ratio < 1
if (shortCondition)
    strategy.entry("Short", strategy.short)

// Display overall sentiment and current flag pattern
label.new(bar_index, low - syminfo.mintick, "Overall Sentiment: " + overall_sentiment, xloc = xloc.bar_time, yloc = yloc.price)
plotchar(bull_flag ? low : bear_flag ? high : na, title="Current Flag Pattern", char="F", location=location.absolute, color=color.new(color.white, 100), offset=-1)
